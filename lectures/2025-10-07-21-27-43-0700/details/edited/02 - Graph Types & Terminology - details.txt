# Graph Types & Terminology

This lecture introduces fundamental concepts and classifications of graphs, covering their basic components, how connections can be directed or weighted, and specific types like paths, cycles, and acyclic graphs. It also defines key properties such as connectivity, density, and vertex degrees in directed graphs.

## Basic Components of a Graph
In graph theory, the fundamental elements are *vertices* and *edges*. Vertices are sometimes referred to as **nodes**, while edges are occasionally called **links**.

## Graph Directionality: Undirected vs. Directed
Graphs can be categorized based on whether their edges have a direction:

*   **Undirected Graphs**: In an *undirected graph*, edges have no specific direction. This means a connection from vertex 1 to vertex 2 is considered the same as a connection from 2 to 1, acting like a two-way street where both vertices are reachable from each other.
*   **Directed Graphs**: A *directed graph* features edges with a specific direction, typically indicated by an arrow. For instance, a connection from 1 to 2 means there is a path from 1 to 2, but not necessarily from 2 to 1. If a connection from 2 to 1 is also desired, it must be explicitly represented as a separate directed edge. Directed connections carry a distinct meaning compared to undirected ones.

## Graph Weighting
Graphs can also be classified by whether their edges have associated values:

*   **Weighted Graphs**: A *weighted graph* has a numerical *weight* assigned to its edges. This weight can represent various attributes, such as the importance, traffic, or criticality of that connection. Typically, weights are associated with edges, though in some cases, vertices might also have weights.
*   **Unweighted Graphs**: Conversely, an *unweighted graph* does not have such numerical values assigned to its edges.

## Understanding Paths in Graphs
A *path* in a graph is a sequence of vertices connected by edges. For example, if vertex A connects to B, and B connects to C, then A-B-C forms a path. Paths can vary in length.

*   **Simple Path**: A *simple path* is a path where no vertices are repeated.
*   **Non-Simple Path**: A *non-simple path* is one where vertices are repeated.
By default, if the type of path is not specified, it is assumed to be a **simple path**.

## Cycles and Acyclic Graphs
A *cycle* is a specific type of path where the starting vertex and the ending vertex are the same.

*   **Acyclic Graphs**: Graphs that do not contain any cycles are called *acyclic graphs*.
*   **Trees**: In the context of an *undirected graph*, an acyclic graph is also known as a **tree**.
*   **Directed Acyclic Graphs (DAGs)**: A *directed graph* that contains no cycles is specifically referred to as a **Directed Acyclic Graph**, or **DAG**. The term "acyclic" implies the absence of cycles.

## Graph Connectivity and Density
The *connectivity* of a graph describes whether all its vertices are reachable from each other. Unless stated otherwise, graphs are generally assumed to be **connected**.

*   **Connected Graph**: In a connected graph, every vertex is reachable from every other vertex.
*   **Not Connected Graph**: A graph is not connected if there are vertices that cannot be reached from others.

*Density* refers to the number of edges a graph has relative to its number of vertices.
*   The *least dense* type of connected graph is a **tree structure**. If even one edge is removed from a tree, it becomes disconnected.
*   Graphs can also be very dense, having many edges.

## Vertex Degrees in Directed Graphs
In a *directed graph*, each vertex has specific properties related to the direction of its incoming and outgoing edges:

*   **In-degree**: The *in-degree* of a vertex is the number of edges that point *into* it.
*   **Out-degree**: The *out-degree* of a vertex is the number of edges that point *out of* it.
*   **Source**: A vertex with an *in-degree* of zero is called a **source**. These are particularly relevant for algorithms like topological sort.
*   **Sink**: A vertex with an *out-degree* of zero is called a **sink**. While defined, sinks are not typically the focus for topological sorts.

## Summary
*   Graphs are composed of *vertices* (nodes) and *edges* (links).
*   Edges can be *undirected* (two-way) or *directed* (one-way, indicated by arrows).
*   Graphs can be *weighted* (edges have values) or *unweighted*.
*   A *path* is a sequence of connected vertices; a *simple path* does not repeat vertices.
*   A *cycle* is a path starting and ending at the same vertex; *acyclic graphs* (like *trees* for undirected graphs or *DAGs* for directed graphs) have no cycles.
*   Graphs are typically assumed to be *connected*, and a *tree* is the least dense connected graph.
*   In directed graphs, *in-degree* counts incoming edges, *out-degree* counts outgoing edges, and a vertex with zero in-degree is a *source*.

## Supplement: What is a Graph?
A **graph** is a fundamental data structure used to represent relationships between objects. It consists of a set of *vertices* (or nodes) and a set of *edges* (or links) that connect pairs of these vertices. This abstract structure allows for modeling various real-world systems, from social networks to transportation routes.