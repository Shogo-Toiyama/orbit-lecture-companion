# Topological Sort Algorithm

This lecture introduces an algorithm for performing a **topological sort** on **directed graphs**. The algorithm is designed to produce a linear ordering of vertices such that for every directed edge from vertex A to vertex C, A comes before C in the ordering. This sort is only possible for directed graphs that do not contain any cycles, known as Directed Acyclic Graphs (DAGs).

## Definition of Topological Sort
A topological sort arranges the vertices of a directed graph into a linear sequence. The fundamental rule for this ordering is that if there is a directed edge from vertex *A* to vertex *C* (denoted as *A* → *C*), then *A* must appear before *C* in the sorted list. The algorithm achieves this by iteratively identifying and outputting "sources," which are vertices with no incoming edges.

## Prerequisites for a Topological Sort
The algorithm operates on **directed graphs**. A crucial condition for a graph to have a topological sort is that it **must not contain any cycles**. Such a graph is referred to as a **Directed Acyclic Graph (DAG)**. If a graph contains a cycle, a topological sort is not possible. A key property of any DAG is that it **must always have at least one source**.

## Key Concepts
*   **Source:** A vertex in a directed graph that has an in-degree of zero, meaning there are no incoming edges to that vertex.
*   **DAG (Directed Acyclic Graph):** A directed graph that contains no cycles.

## The Topological Sort Algorithm Steps

The algorithm proceeds in two main phases: an initialization phase to find initial sources, and a main loop that iteratively processes and removes sources.

### Phase 1: Initialization and Identifying Initial Sources
1.  **Calculate In-Degrees:** For every vertex in the graph, determine its **in-degree** (the number of incoming edges). This is done by scanning through all edges in the graph's representation (e.g., an adjacency list). For each edge from vertex *X* to vertex *Y*, increment the in-degree count for *Y*.
2.  **Identify Initial Sources:** After calculating all in-degrees, identify all vertices whose in-degree is zero. These are the initial sources of the graph.
3.  **Store Sources:** Store these initial sources in a separate data structure, such as a linked list or an array. This is done for efficiency, to avoid repeatedly scanning the entire graph to find sources later.

### Phase 2: Main Loop - Iterative Source Removal
This phase repeats *N* times, where *N* is the total number of vertices in the graph, as long as there are sources available:

1.  **Select and Output a Source:** Take one source from the list of available sources, remove it from the list, and add it to the output sequence. This output sequence will be the topological sort.
2.  **Remove from Graph and Update Neighbors:** Conceptually remove the selected source vertex and all its outgoing edges from the graph.
3.  **Decrement In-Degrees of Neighbors:** For every vertex *J* that was a direct successor of the removed source *I* (i.e., there was an edge *I* → *J*), decrement *J*'s in-degree by 1. This reflects that the edge from *I* to *J* no longer exists.
4.  **Identify New Sources:** If decrementing a vertex's in-degree causes it to become zero, that vertex is now a new source. Immediately add this newly identified source to the list of available sources. This immediate addition is crucial for the algorithm's efficiency, preventing the need for full graph scans to find new sources.

## Proof of Correctness
The algorithm's correctness relies on several key principles:
*   **DAG Property Preservation:** When a source vertex and its outgoing edges are removed from a DAG, the remaining graph is still a DAG. Removing elements cannot create cycles.
*   **Guaranteed Sources:** Because the remaining graph is still a DAG, it is guaranteed to have at least one source, ensuring the algorithm can continue until all vertices are processed.
*   **Topological Order Maintenance:** Each time a vertex is output, it is a source in the *current* (reduced) graph. This means no edges exist from any *remaining* vertices to the just-outputted vertex. Therefore, any vertex output later in the sequence cannot have an edge pointing back to an earlier vertex, satisfying the fundamental rule of topological sort (e.g., if *A* is output before *C*, there cannot be an edge *C* → *A*).

## Efficiency Considerations
The lecture emphasizes that the method of immediately updating in-degrees and adding new sources to a dedicated list is vital for the algorithm's **time complexity**. This approach avoids the inefficiency of repeatedly scanning the entire graph to find new sources at each step.

## Application to Cycle Finding
This topological sort algorithm can be adapted to detect cycles in a directed graph. If, after the algorithm completes, the total number of vertices outputted is less than the total number of vertices in the original graph, it indicates that the graph must contain a cycle. This is because if a cycle exists, some vertices within that cycle will never become sources and thus will not be outputted.

## Summary
*   A **topological sort** orders vertices in a directed graph such that for every edge *A* → *C*, *A* comes before *C*.
*   This sort is only possible for **Directed Acyclic Graphs (DAGs)**, which are directed graphs without cycles.
*   The algorithm works by iteratively identifying and outputting **sources** (vertices with zero incoming edges).
*   It involves an initialization step to calculate initial in-degrees and find all initial sources, storing them in a separate list.
*   The main loop repeatedly removes a source, outputs it, decrements the in-degrees of its neighbors, and adds any newly formed sources to the list for subsequent processing.

## Supplement: Explanation of Technical Terms
*   **Directed Graph:** A graph where edges have a direction, typically represented as arrows (e.g., *A* → *C* means an edge from *A* to *C*).
*   **In-degree:** For a vertex, the number of incoming edges pointing to it.
*   **Out-degree:** For a vertex, the number of outgoing edges originating from it. (The lecture uses "odd degree," which is understood to mean out-degree in this context.)
*   **Vertex (plural: Vertices):** A fundamental unit of a graph, often represented as a node.
*   **Edge:** A connection between two vertices in a graph. In a directed graph, an edge has a specific direction.