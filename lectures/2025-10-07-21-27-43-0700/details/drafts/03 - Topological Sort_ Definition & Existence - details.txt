# Topological Sort: Definition & Existence

Topological sort is an ordering of vertices in a directed graph such that for every directed edge from vertex A to vertex B, A appears before B in the ordering. This lecture defines what a topological sort is, explains that it is not unique, and critically, establishes that a topological sort exists *if and only if* the directed graph contains no cycles.

## Definition of Topological Sort

Topological sorting is a problem specifically defined for **directed graphs**. It involves outputting or ordering the *vertices* of a graph. The core rule for this ordering is that whenever there is a directed edge from vertex B to vertex D, then **B must come before D** in the resulting sorted list. An ordering is considered a topological sort if it satisfies this rule for *every* directed edge in the graph.

## Comparison with Standard Sorting

Students are generally familiar with sorting numbers, where the rule is that each number must be larger than or equal to the one before it (e.g., 3, 1, 2 sorted to 1, 2, 3). In contrast, topological sorting applies to graph vertices and uses a different ordering rule based on directed edges.

## The Ordering Principle in Topological Sort

The ordering requirement extends beyond direct edges to **paths** within the graph. If there is a directed path from vertex A to vertex D (e.g., A → B → C → D), then D must come after A in the topological sort, even if there is no direct edge between A and D. This is because the rule dictates that B must come after A, C after B, and D after C, which transitively means D must come after A. Essentially, as long as there is a directed path between two vertices, the second vertex in the path must appear after the first in the sorted list.

## Uniqueness of Topological Sort

A topological sort for a given graph is **not unique**; there can be many valid topological sorts. For instance, if two vertices, B and C, have no direct relationship (no directed edge or path between them), their relative order in the sorted list can often be swapped without violating the topological sort rules. This non-uniqueness can lead to a large number of possible solutions; for some graph structures, there can be 2^(N/2) different topological sorts, where N is the number of vertices. Attempting to output *every possible* topological sort would result in an exponential time algorithm, which is generally inefficient.

## When a Topological Sort Does Not Exist: The Problem of Cycles

A topological sort **cannot exist** if the directed graph contains a **cycle**. Consider a cycle like A → B → C → A. For this to be a topological sort, A must come before B, B must come before C, and C must come before A. This creates a logical contradiction, making it impossible to satisfy all ordering requirements simultaneously. Therefore, if any part of a graph contains a cycle of any length, a topological sort for that graph does not exist. If asked to provide a topological sort for a graph with a cycle, the correct answer is that one does not exist.

## When a Topological Sort Exists: Directed Acyclic Graphs (DAGs)

The converse question is whether a topological sort *always exists* if a directed graph has **no cycles**. The lecture claims that as long as a directed graph does not have any cycles, it will **always have a topological sort**. Such graphs are known as Directed Acyclic Graphs (DAGs). To prove this claim, an algorithm, a formal proof, and a time complexity analysis are required. The goal is to demonstrate that for any DAG, an algorithm can produce a valid topological sort.

## Fact 1: Every DAG Has at Least One Source

A crucial property for understanding the existence of topological sorts in DAGs is **Fact 1**: *Every Directed Acyclic Graph (DAG) must have at least one source*. A source is a vertex with no incoming edges. This fact is fundamental and will be used multiple times in developing algorithms and proofs related to topological sorting. If an algorithm attempting to find a topological sort runs out of sources at any point, it implies that there must be a cycle in the remaining graph.

## Significance and Applications of Topological Sort

The topological sort problem is significant due to its interesting structure. The algorithms developed to solve it can be applied as a step in solving many other problems, both within this course and in broader applications. Many real-world scenarios utilize topological sort for ordering tasks or dependencies.

## Summary

*   A **topological sort** orders the vertices of a **directed graph** such that if there's an edge from A to B, A always comes before B.
*   This ordering principle extends to **paths**: if A leads to D via a path, A must precede D.
*   A topological sort is **not unique**; multiple valid orderings can exist for the same graph.
*   A topological sort **cannot exist** if the graph contains any **cycles**, as this creates a contradiction in ordering.
*   Conversely, a topological sort **always exists** for a **Directed Acyclic Graph (DAG)**, which is a directed graph with no cycles.
*   A key property (Fact 1) states that **every DAG must have at least one source** (a vertex with no incoming edges).

## Supplement

**Directed Acyclic Graph (DAG):** A directed graph that contains no directed cycles. This means it's impossible to start at a vertex and follow a sequence of directed edges to return to that same vertex.