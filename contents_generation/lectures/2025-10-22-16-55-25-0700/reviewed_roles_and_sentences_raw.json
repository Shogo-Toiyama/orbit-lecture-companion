{
  "segments": [
    {
      "role": "lecture",
      "start_sid": "s000001",
      "end_sid": "s000011"
    },
    {
      "role": "lecture",
      "start_sid": "s000012",
      "end_sid": "s000029"
    },
    {
      "role": "lecture",
      "start_sid": "s000030",
      "end_sid": "s000059"
    },
    {
      "role": "lecture",
      "start_sid": "s000060",
      "end_sid": "s000065"
    },
    {
      "role": "qa",
      "start_sid": "s000066",
      "end_sid": "s000068"
    },
    {
      "role": "lecture",
      "start_sid": "s000069",
      "end_sid": "s000085"
    },
    {
      "role": "qa",
      "start_sid": "s000086",
      "end_sid": "s000088"
    },
    {
      "role": "lecture",
      "start_sid": "s000089",
      "end_sid": "s000109"
    },
    {
      "role": "lecture",
      "start_sid": "s000110",
      "end_sid": "s000112"
    },
    {
      "role": "lecture",
      "start_sid": "s000113",
      "end_sid": "s000119"
    },
    {
      "role": "lecture",
      "start_sid": "s000120",
      "end_sid": "s000125"
    },
    {
      "role": "lecture",
      "start_sid": "s000126",
      "end_sid": "s000129"
    },
    {
      "role": "lecture",
      "start_sid": "s000130",
      "end_sid": "s000143"
    },
    {
      "role": "lecture",
      "start_sid": "s000144",
      "end_sid": "s000165"
    },
    {
      "role": "lecture",
      "start_sid": "s000166",
      "end_sid": "s000178"
    },
    {
      "role": "lecture",
      "start_sid": "s000179",
      "end_sid": "s000183"
    },
    {
      "role": "lecture",
      "start_sid": "s000184",
      "end_sid": "s000194"
    },
    {
      "role": "lecture",
      "start_sid": "s000195",
      "end_sid": "s000202"
    },
    {
      "role": "lecture",
      "start_sid": "s000203",
      "end_sid": "s000216"
    },
    {
      "role": "lecture",
      "start_sid": "s000217",
      "end_sid": "s000220"
    },
    {
      "role": "lecture",
      "start_sid": "s000221",
      "end_sid": "s000242"
    },
    {
      "role": "lecture",
      "start_sid": "s000243",
      "end_sid": "s000253"
    },
    {
      "role": "lecture",
      "start_sid": "s000254",
      "end_sid": "s000276"
    },
    {
      "role": "qa",
      "start_sid": "s000277",
      "end_sid": "s000285"
    },
    {
      "role": "qa",
      "start_sid": "s000286",
      "end_sid": "s000304"
    },
    {
      "role": "chitchat",
      "start_sid": "s000305",
      "end_sid": "s000305"
    },
    {
      "role": "qa",
      "start_sid": "s000306",
      "end_sid": "s000308"
    },
    {
      "role": "qa",
      "start_sid": "s000309",
      "end_sid": "s000314"
    },
    {
      "role": "qa",
      "start_sid": "s000315",
      "end_sid": "s000318"
    },
    {
      "role": "lecture",
      "start_sid": "s000319",
      "end_sid": "s000323"
    },
    {
      "role": "lecture",
      "start_sid": "s000324",
      "end_sid": "s000329"
    },
    {
      "role": "chitchat",
      "start_sid": "s000330",
      "end_sid": "s000330"
    },
    {
      "role": "qa",
      "start_sid": "s000331",
      "end_sid": "s000333"
    },
    {
      "role": "lecture",
      "start_sid": "s000334",
      "end_sid": "s000344"
    },
    {
      "role": "lecture",
      "start_sid": "s000345",
      "end_sid": "s000353"
    },
    {
      "role": "lecture",
      "start_sid": "s000354",
      "end_sid": "s000364"
    },
    {
      "role": "qa",
      "start_sid": "s000367",
      "end_sid": "s000370"
    },
    {
      "role": "lecture",
      "start_sid": "s000371",
      "end_sid": "s000374"
    },
    {
      "role": "lecture",
      "start_sid": "s000375",
      "end_sid": "s000384"
    },
    {
      "role": "lecture",
      "start_sid": "s000385",
      "end_sid": "s000403"
    },
    {
      "role": "qa",
      "start_sid": "s000404",
      "end_sid": "s000410"
    },
    {
      "role": "lecture",
      "start_sid": "s000411",
      "end_sid": "s000423"
    },
    {
      "role": "lecture",
      "start_sid": "s000424",
      "end_sid": "s000444"
    },
    {
      "role": "lecture",
      "start_sid": "s000445",
      "end_sid": "s000463"
    },
    {
      "role": "lecture",
      "start_sid": "s000464",
      "end_sid": "s000475"
    },
    {
      "role": "lecture",
      "start_sid": "s000476",
      "end_sid": "s000485"
    },
    {
      "role": "qa",
      "start_sid": "s000486",
      "end_sid": "s000488"
    },
    {
      "role": "lecture",
      "start_sid": "s000489",
      "end_sid": "s000498"
    },
    {
      "role": "lecture",
      "start_sid": "s000499",
      "end_sid": "s000504"
    },
    {
      "role": "qa",
      "start_sid": "s000507",
      "end_sid": "s000508"
    },
    {
      "role": "lecture",
      "start_sid": "s000509",
      "end_sid": "s000516"
    },
    {
      "role": "qa",
      "start_sid": "s000517",
      "end_sid": "s000532"
    },
    {
      "role": "qa",
      "start_sid": "s000534",
      "end_sid": "s000547"
    },
    {
      "role": "lecture",
      "start_sid": "s000548",
      "end_sid": "s000557"
    },
    {
      "role": "lecture",
      "start_sid": "s000558",
      "end_sid": "s000578"
    },
    {
      "role": "lecture",
      "start_sid": "s000579",
      "end_sid": "s000583"
    },
    {
      "role": "lecture",
      "start_sid": "s000584",
      "end_sid": "s000609"
    },
    {
      "role": "lecture",
      "start_sid": "s000610",
      "end_sid": "s000623"
    },
    {
      "role": "lecture",
      "start_sid": "s000624",
      "end_sid": "s000653"
    },
    {
      "role": "lecture",
      "start_sid": "s000654",
      "end_sid": "s000663"
    },
    {
      "role": "lecture",
      "start_sid": "s000664",
      "end_sid": "s000673"
    },
    {
      "role": "qa",
      "start_sid": "s000674",
      "end_sid": "s000684"
    },
    {
      "role": "lecture",
      "start_sid": "s000685",
      "end_sid": "s000703"
    },
    {
      "role": "lecture",
      "start_sid": "s000704",
      "end_sid": "s000725"
    },
    {
      "role": "lecture",
      "start_sid": "s000726",
      "end_sid": "s000752"
    },
    {
      "role": "lecture",
      "start_sid": "s000753",
      "end_sid": "s000762"
    },
    {
      "role": "lecture",
      "start_sid": "s000763",
      "end_sid": "s000775"
    },
    {
      "role": "lecture",
      "start_sid": "s000776",
      "end_sid": "s000784"
    },
    {
      "role": "lecture",
      "start_sid": "s000785",
      "end_sid": "s000808"
    },
    {
      "role": "lecture",
      "start_sid": "s000809",
      "end_sid": "s000813"
    },
    {
      "role": "qa",
      "start_sid": "s000814",
      "end_sid": "s000824"
    },
    {
      "role": "lecture",
      "start_sid": "s000825",
      "end_sid": "s000859"
    },
    {
      "role": "lecture",
      "start_sid": "s000860",
      "end_sid": "s000865"
    },
    {
      "role": "lecture",
      "start_sid": "s000866",
      "end_sid": "s000872"
    },
    {
      "role": "qa",
      "start_sid": "s000873",
      "end_sid": "s000886"
    },
    {
      "role": "lecture",
      "start_sid": "s000887",
      "end_sid": "s000905"
    },
    {
      "role": "lecture",
      "start_sid": "s000906",
      "end_sid": "s000924"
    },
    {
      "role": "lecture",
      "start_sid": "s000925",
      "end_sid": "s000957"
    },
    {
      "role": "lecture",
      "start_sid": "s000958",
      "end_sid": "s000964"
    },
    {
      "role": "announcement",
      "start_sid": "s000965",
      "end_sid": "s000965"
    },
    {
      "role": "chitchat",
      "start_sid": "s000966",
      "end_sid": "s000966"
    }
  ],
  "changes": [],
  "fixes": [
    {
      "sid": "s000004",
      "modified": "So we would say this is 1, this is 1, this is 1A, 2."
    },
    {
      "sid": "s000010",
      "modified": "Okay, so join."
    },
    {
      "sid": "s000013",
      "modified": "So anything to do with leveling, etc."
    },
    {
      "sid": "s000022",
      "modified": "That is, the two algorithms are pretty much the same."
    },
    {
      "sid": "s000028",
      "modified": "So for now, for today, only the edges are weighted."
    },
    {
      "sid": "s000044",
      "modified": "Okay, so always go through these few minutes of exercise with yourself, do I understand the problem?"
    },
    {
      "sid": "s000050",
      "modified": "Just sit back, think about the problem, do a few examples."
    },
    {
      "sid": "s000061",
      "modified": "I may try that."
    },
    {
      "sid": "s000062",
      "modified": "I may try grid first search, modification of preference search."
    },
    {
      "sid": "s000073",
      "modified": "It will be a function of vertices, edges, and weights."
    },
    {
      "sid": "s000076",
      "modified": "So when you write a program, the input you take are the vertices and edges and weight on the edges."
    },
    {
      "sid": "s000083",
      "modified": "So in this class, whenever you hear polynomial or quadratic or linear, it always means linear, quadratic, polynomial in the input size."
    },
    {
      "sid": "s000085",
      "modified": "Okay, so maybe taking an edge of size 100 and translating that into 100 unit weight edges works, but that won't be polynomial anymore, and therefore we are not interested in it."
    },
    {
      "sid": "s000086",
      "modified": "Okay, so how would I go about solving this problem?"
    },
    {
      "sid": "s000091",
      "modified": "So in a few weeks or by the end of this course, we have six of these items available to us."
    },
    {
      "sid": "s000092",
      "modified": "So one of the things I can try is all these algorithmic paradigms for today."
    },
    {
      "sid": "s000098",
      "modified": "Greedy says that take this, that's your starting point."
    },
    {
      "sid": "s000100",
      "modified": "By definition, we are already there."
    },
    {
      "sid": "s000101",
      "modified": "There are no edges to traverse from S to get to S. So the question is, is there going to be another vertex in this graph that I can confidently say its distance to S and never change that?"
    },
    {
      "sid": "s000103",
      "modified": "Of all the interval scheduling that we did last time, you take the one that ends first without having looked at all the other intervals, you say that's what's going to be in the output of the non-overlapping interval problem."
    },
    {
      "sid": "s000106",
      "modified": "If it was possible to do something similar there, then that vertex probably won't be a vertex way far from S, because there are so many paths between S and say X."
    },
    {
      "sid": "s000107",
      "modified": "Assuming X is connected to all of this, that immediately, right away, trying to figure out the distance of X seems difficult."
    },
    {
      "sid": "s000108",
      "modified": "So X may not be a good choice for the immediate greedy decision that I'm trying to make."
    },
    {
      "sid": "s000109",
      "modified": "Because for now, in my head, I want to try greedy."
    },
    {
      "sid": "s000113",
      "modified": "There are also technical difficulties when the weights are negative."
    },
    {
      "sid": "s000115",
      "modified": "So for now, I assume all the weights on the edges are positive numbers."
    },
    {
      "sid": "s000116",
      "modified": "And let's say integers 1, 2, 3, 8, 7, 12, etc."
    },
    {
      "sid": "s000117",
      "modified": "In about four weeks, you will have algorithms that can deal with negative edges."
    },
    {
      "sid": "s000119",
      "modified": "We don't have the tools to tackle that problem."
    },
    {
      "sid": "s000121",
      "modified": "Because there are just so many paths to X, I can't tell for sure what the distance."
    },
    {
      "sid": "s000122",
      "modified": "If I'm going from LA and I want to find the shortest path to the city, probably going somewhere to New York."
    },
    {
      "sid": "s000123",
      "modified": "That's tough because there are so many ways to get there."
    },
    {
      "sid": "s000124",
      "modified": "Planes, trains, so many roads I could take, I could bike part of it."
    },
    {
      "sid": "s000126",
      "modified": "So, so many options. So that seemed to be a tough problem, what going from outside of LA, say, to San Diego."
    },
    {
      "sid": "s000127",
      "modified": "Choices are limited, so it's a more controlled problem."
    },
    {
      "sid": "s000128",
      "modified": "So maybe I can immediately discuss the best way to go from San Diego."
    },
    {
      "sid": "s000130",
      "modified": "Okay, so based on this concept, then maybe I initially look at neighbors of S. For example, I take the neighbor that's closest to S, B, and I say, how do I get from S to B? It's through this edge."
    },
    {
      "sid": "s000131",
      "modified": "Therefore, I write the distance from S to B as 1."
    },
    {
      "sid": "s000133",
      "modified": "It's the final shortest path, not some intermediate number, not a number that I'm going to change later."
    },
    {
      "sid": "s000134",
      "modified": "It's the final shortest path."
    },
    {
      "sid": "s000135",
      "modified": "So I claim, if you take all neighbors of S, take the one that's closest to, in this example, B."
    },
    {
      "sid": "s000136",
      "modified": "First of all, what are neighbors of S? A and B?"
    },
    {
      "sid": "s000137",
      "modified": "Which one is closest to S?"
    },
    {
      "sid": "s000139",
      "modified": "Because this is 10, this is 1."
    },
    {
      "sid": "s000140",
      "modified": "I'm going to say in a greedy fashion, in a greedy paradigm methodology, the distance from S to B."
    },
    {
      "sid": "s000141",
      "modified": "When I say distance, I mean the shortest distance."
    },
    {
      "sid": "s000142",
      "modified": "The shortest path is 1."
    },
    {
      "sid": "s000144",
      "modified": "How do I prove it?"
    },
    {
      "sid": "s000145",
      "modified": "The way I prove it is the following."
    },
    {
      "sid": "s000146",
      "modified": "This is S, this is B."
    },
    {
      "sid": "s000147",
      "modified": "And I'm saying this is the shortest path by contradiction."
    },
    {
      "sid": "s000148",
      "modified": "If there was a shorter path from S to B, it would go through some other vertex and it comes back to B."
    },
    {
      "sid": "s000149",
      "modified": "And remember, the length of the path is irrelevant."
    },
    {
      "sid": "s000150",
      "modified": "It's the weight that matters, the sum of the weights."
    },
    {
      "sid": "s000151",
      "modified": "So by contradiction, if there was a path like that, let's look at the very first edge on this path."
    },
    {
      "sid": "s000153",
      "modified": "In this example, Y is A."
    },
    {
      "sid": "s000155",
      "modified": "So S has to go through Y and then some other edges."
    },
    {
      "sid": "s000156",
      "modified": "The distance from S to Y is greater than the distance from S to B, Y, because I picked B to be such a vertex, I picked the shortest one, the shortest edge, the minimum edge."
    },
    {
      "sid": "s000157",
      "modified": "Therefore, because that's the case, then whatever I add from Y to B, so this is plus DY to B."
    },
    {
      "sid": "s000158",
      "modified": "That's gotta be greater than D of S to B."
    },
    {
      "sid": "s000159",
      "modified": "So this number is greater than this number."
    },
    {
      "sid": "s000160",
      "modified": "Adding some extra stuff, basic algebra, is going to make that number bigger only because this part is a positive number."
    },
    {
      "sid": "s000161",
      "modified": "Because I assumed there are no negative edges in this case graph."
    },
    {
      "sid": "s000162",
      "modified": "And in fact, when I have negative edges, this whole basic premise is going to fade."
    },
    {
      "sid": "s000163",
      "modified": "And that's why greedy doesn't work with negative edges."
    },
    {
      "sid": "s000164",
      "modified": "That's why we assume, to begin with, there are negative edges."
    },
    {
      "sid": "s000166",
      "modified": "Okay, so based on this proof, I write in a flow what I just said here."
    },
    {
      "sid": "s000167",
      "modified": "It means this should be the final weight from S to B."
    },
    {
      "sid": "s000168",
      "modified": "So wonderful, we can find at least one vertex whose distance to S is the minimum distance."
    },
    {
      "sid": "s000169",
      "modified": "So the first step of reading, we were able to solve in the famous problem when A asks B, that one first step happens."
    },
    {
      "sid": "s000170",
      "modified": "Based on the answer, we eliminate one of them in interval scheduling."
    },
    {
      "sid": "s000171",
      "modified": "The first interval that ends, I put it in the optimal solution and then I kind of carry this idea to the rest of the problem."
    },
    {
      "sid": "s000172",
      "modified": "So I have reduced the problem size here."
    },
    {
      "sid": "s000173",
      "modified": "The same thing I have reduced the problem size with, say, well, well, S is easy."
    },
    {
      "sid": "s000174",
      "modified": "So I have n minus one other vertices."
    },
    {
      "sid": "s000178",
      "modified": "But B is kind of special."
    },
    {
      "sid": "s000179",
      "modified": "It's the closest thing to S. There are no other vertices that are closest to S. So then I have to go to the second closest."
    },
    {
      "sid": "s000181",
      "modified": "Next one is going to be A, the next neighbor that's after one closest."
    },
    {
      "sid": "s000182",
      "modified": "So I go to A and I say, okay, the distance is 10 and that's finalized."
    },
    {
      "sid": "s000183",
      "modified": "That's the minimum distance from S to A."
    },
    {
      "sid": "s000184",
      "modified": "Trying to scale up the first thing that I came up with."
    },
    {
      "sid": "s000185",
      "modified": "Now if you try that proof from S to A, you gotta prove that if there was an alternate path from S to A, that would be less than that."
    },
    {
      "sid": "s000187",
      "modified": "The only reason we could say that before is because S to Y for sure is greater than S to B."
    },
    {
      "sid": "s000188",
      "modified": "That was the very definition of B."
    },
    {
      "sid": "s000189",
      "modified": "But now we don't have that anymore because this distance in general could be less than that."
    },
    {
      "sid": "s000190",
      "modified": "Therefore it could be a path going back to A which is less than 10."
    },
    {
      "sid": "s000191",
      "modified": "In fact, in this example, that's exactly the case."
    },
    {
      "sid": "s000192",
      "modified": "So fixing a distance from S to A to 10 is not going to work."
    },
    {
      "sid": "s000193",
      "modified": "Prove we can't prove it."
    },
    {
      "sid": "s000194",
      "modified": "Our basic proof technique is going to fail and we have in fact a counterexample."
    },
    {
      "sid": "s000196",
      "modified": "Should I go to a vertex that's closest to B?"
    },
    {
      "sid": "s000197",
      "modified": "A vertex that's closest to B?"
    },
    {
      "sid": "s000199",
      "modified": "So this whole idea of greedy, the greedy idea, unless we can come up with a clever way of picking a next vertex."
    },
    {
      "sid": "s000200",
      "modified": "In this example, if I knew how to pick the next vertex, I would pick C as my next vertex and fix that as 1 plus 1."
    },
    {
      "sid": "s000201",
      "modified": "So C will be a good choice."
    },
    {
      "sid": "s000202",
      "modified": "A is not a good choice."
    },
    {
      "sid": "s000203",
      "modified": "So you see, I'm trying, I don't know how to solve this problem, so I'm going to try greedy."
    },
    {
      "sid": "s000204",
      "modified": "I'm going to go from B."
    },
    {
      "sid": "s000206",
      "modified": "Then I'm going to go to A."
    },
    {
      "sid": "s000207",
      "modified": "That phase, then I come up with hypothesis of what else to consider."
    },
    {
      "sid": "s000208",
      "modified": "And these ideas and these examples hopefully will give rise to a brand new algorithm."
    },
    {
      "sid": "s000209",
      "modified": "So solving this problem is not important."
    },
    {
      "sid": "s000210",
      "modified": "Solving any problem in this course is not important."
    },
    {
      "sid": "s000211",
      "modified": "What is important is the methodology."
    },
    {
      "sid": "s000212",
      "modified": "That's why we try to come up with an algorithm together from scratch, in terms of what may work, what may not work and how to evolve our thinking."
    },
    {
      "sid": "s000213",
      "modified": "That's really why what matters, problem-solving things."
    },
    {
      "sid": "s000214",
      "modified": "Because a problem that you see in the future, let's say your job is a problem that no one ever solved before."
    },
    {
      "sid": "s000215",
      "modified": "Because if they did, why do they need you?"
    },
    {
      "sid": "s000216",
      "modified": "They need you to solve a problem that was never solved."
    },
    {
      "sid": "s000217",
      "modified": "Yeah, so we did greedy algorithm and let me rephrase, we did the greedy algorithm and that allowed us to choose B."
    },
    {
      "sid": "s000218",
      "modified": "What if we continue the algorithm but this time we start from B as if it's the new S and then we do the same exact step and that will give us C. We do the same thing."
    },
    {
      "sid": "s000219",
      "modified": "Now C is the new square and we start like going."
    },
    {
      "sid": "s000220",
      "modified": "So essentially it's some sort of a DFS, but with the greedy algorithm."
    },
    {
      "sid": "s000222",
      "modified": "So because we got stuck here, we need to have other techniques."
    },
    {
      "sid": "s000223",
      "modified": "So your technique is S perfect, everything works, improved."
    },
    {
      "sid": "s000224",
      "modified": "Now let's start from B."
    },
    {
      "sid": "s000225",
      "modified": "Would that work in this example?"
    },
    {
      "sid": "s000227",
      "modified": "Okay, so let's change the example now with your algorithm work."
    },
    {
      "sid": "s000228",
      "modified": "So it's a good, good way to proceed and it worked for the previous examples, but it won't work here."
    },
    {
      "sid": "s000229",
      "modified": "We need something else."
    },
    {
      "sid": "s000231",
      "modified": "So, so, yeah, so, so these are good."
    },
    {
      "sid": "s000232",
      "modified": "When you are seeing a problem for the first time, we have to go through this process of trying different things."
    },
    {
      "sid": "s000233",
      "modified": "You almost like first shot, you can't solve the problem."
    },
    {
      "sid": "s000234",
      "modified": "It's gotta be an iterative approach."
    },
    {
      "sid": "s000235",
      "modified": "That's why it takes time, especially when you come to these created algorithms."
    },
    {
      "sid": "s000237",
      "modified": "So don't be afraid of trying different things."
    },
    {
      "sid": "s000238",
      "modified": "Many of them gonna fail and that's good."
    },
    {
      "sid": "s000239",
      "modified": "From that we're gonna learn."
    },
    {
      "sid": "s000240",
      "modified": "We just did a few hypothesis."
    },
    {
      "sid": "s000241",
      "modified": "They both failed."
    },
    {
      "sid": "s000242",
      "modified": "But based on that, you came up with another algorithm."
    },
    {
      "sid": "s000244",
      "modified": "So based on that, let me suggest the following."
    },
    {
      "sid": "s000245",
      "modified": "Let me get rid of that."
    },
    {
      "sid": "s000246",
      "modified": "So there are numbers that are finalized."
    },
    {
      "sid": "s000247",
      "modified": "I put them in brackets."
    },
    {
      "sid": "s000249",
      "modified": "But there are also numbers that are temporary."
    },
    {
      "sid": "s000250",
      "modified": "For example, I've seen a."
    },
    {
      "sid": "s000251",
      "modified": "This was 10."
    },
    {
      "sid": "s000252",
      "modified": "This is 1, original."
    },
    {
      "sid": "s000253",
      "modified": "I say for now, I know a path of distance 10 from A to S. I'm not going to finalize that because it won't work."
    },
    {
      "sid": "s000254",
      "modified": "I also know a path of length 1, 2 from C to S. Right."
    },
    {
      "sid": "s000255",
      "modified": "So I think that's what you are hinting at."
    },
    {
      "sid": "s000256",
      "modified": "Find all these temporary distances to S. Among them, pick the minimum one."
    },
    {
      "sid": "s000257",
      "modified": "So what are the parentheses numbers?"
    },
    {
      "sid": "s000258",
      "modified": "They are the shortest path from that vertex X to S. For this one, it's going to be Y to S. It doesn't mean it's the shortest path."
    },
    {
      "sid": "s000259",
      "modified": "10 is not the shortest path."
    },
    {
      "sid": "s000260",
      "modified": "It's a path that is available to me right now."
    },
    {
      "sid": "s000261",
      "modified": "There might be shorter path later."
    },
    {
      "sid": "s000262",
      "modified": "And this example shows there is a shorter path."
    },
    {
      "sid": "s000263",
      "modified": "But I do have a path of length 10."
    },
    {
      "sid": "s000264",
      "modified": "Of all these short paths here, I'm going to pick a minimum one."
    },
    {
      "sid": "s000266",
      "modified": "This could be this."
    },
    {
      "sid": "s000267",
      "modified": "That parenthesis is one of them."
    },
    {
      "sid": "s000269",
      "modified": "I pick the minimum one."
    },
    {
      "sid": "s000270",
      "modified": "Let's say this is the minimum."
    },
    {
      "sid": "s000271",
      "modified": "And I say this, this path is the minimum path of everyone with parentheses."
    },
    {
      "sid": "s000273",
      "modified": "The proof is exactly that if there was a shorter path to Y, then it had to go with something here, for example, through X and then back to Y."
    },
    {
      "sid": "s000274",
      "modified": "But the path from S to X is already larger than the path from S to Y."
    },
    {
      "sid": "s000276",
      "modified": "Because I picked it that way."
    },
    {
      "sid": "s000277",
      "modified": "Of all possibilities, I picked the minimum Y."
    },
    {
      "sid": "s000278",
      "modified": "Therefore, any other path that later on by contradiction takes me to Y is going to be larger than higher rate than the one that I picked here."
    },
    {
      "sid": "s000284",
      "modified": "So based on all the thinking, all the examples, being patient, the few algorithms you came up with, or few ideas that you came up with that failed, all of that leads to this idea?"
    },
    {
      "sid": "s000286",
      "modified": "How do you know that the 1:1."
    },
    {
      "sid": "s000287",
      "modified": "Next to the D is finalized?"
    },
    {
      "sid": "s000289",
      "modified": "So B has been reached and finalized."
    },
    {
      "sid": "s000290",
      "modified": "S has been reached and finalized."
    },
    {
      "sid": "s000291",
      "modified": "Okay, so now my choices are this or that."
    },
    {
      "sid": "s000292",
      "modified": "The only way that I can go from C to S is either through two or some other way, right?"
    },
    {
      "sid": "s000293",
      "modified": "So if there was some other way."
    },
    {
      "sid": "s000295",
      "modified": "If there was some other way, and that green would have been by contradiction, less than 2."
    },
    {
      "sid": "s000296",
      "modified": "I do have a contradiction, because from here to S is already greater than 2, then I add some extra stuff to it, it's going to be even more than two."
    },
    {
      "sid": "s000297",
      "modified": "So of all the paths that are reachable to S currently, I pick the minimum one."
    },
    {
      "sid": "s000298",
      "modified": "That's why I put the word minimum here."
    },
    {
      "sid": "s000299",
      "modified": "Therefore, any other path that takes me to C is going to be larger than 2."
    },
    {
      "sid": "s000300",
      "modified": "Therefore, finalizing C, saying this is the final path is correct."
    },
    {
      "sid": "s000301",
      "modified": "The proof is basically this."
    },
    {
      "sid": "s000303",
      "modified": "So how did I find this C idea is by trying a few other things, noticing that they all fail, and trying to reason why it failed."
    },
    {
      "sid": "s000304",
      "modified": "And maybe as a next extension, I come up with this idea of all possibilities of paths that are not finalized, pick the minimum one."
    },
    {
      "sid": "s000306",
      "modified": "So let's say if we're going from S to C, we can keep count of, okay, we cross the one, we cross the one, count is two, and then we can remove those edges."
    },
    {
      "sid": "s000307",
      "modified": "So there only remains the paths that we haven't taken until we see the vertex that we look."
    },
    {
      "sid": "s000309",
      "modified": "So what is it that we remove?"
    },
    {
      "sid": "s000310",
      "modified": "I the edges that we visit."
    },
    {
      "sid": "s000311",
      "modified": "They got."
    },
    {
      "sid": "s000313",
      "modified": "You mean this is like this is finalized?"
    },
    {
      "sid": "s000314",
      "modified": "I don't deal with this anymore."
    },
    {
      "sid": "s000315",
      "modified": "Well, I keep count of it and I just remove it because I've taken that path already towards my vertex that I'm looking for."
    },
    {
      "sid": "s000317",
      "modified": "So by putting this as one, it means you don't need to."
    },
    {
      "sid": "s000318",
      "modified": "You don't need to physically remove it."
    },
    {
      "sid": "s000319",
      "modified": "Maybe that's what you're saying, but you're saying, because I have one, I know something about this path already."
    },
    {
      "sid": "s000321",
      "modified": "So by putting this as one, it means you don't need to."
    },
    {
      "sid": "s000322",
      "modified": "You don't need to physically remove it."
    },
    {
      "sid": "s000323",
      "modified": "Maybe that's what you're saying, but you're saying, because I have one, I know something about this path already."
    },
    {
      "sid": "s000325",
      "modified": "That's implementation detail."
    },
    {
      "sid": "s000326",
      "modified": "We are after a higher level idea, an algorithm."
    },
    {
      "sid": "s000327",
      "modified": "Then when we get to the bottom, how do we implement it?"
    },
    {
      "sid": "s000328",
      "modified": "Remove edges, add edges, keep track of these temporary numbers, whatever those come kind of at the end."
    },
    {
      "sid": "s000329",
      "modified": "Before that, we have a higher level idea always that we need to be comfortable."
    },
    {
      "sid": "s000331",
      "modified": "I'm sorry, can you explain what the."
    },
    {
      "sid": "s000332",
      "modified": "Subset that we're choosing is?"
    },
    {
      "sid": "s000334",
      "modified": "First off, let's do an example here."
    },
    {
      "sid": "s000335",
      "modified": "The subset is A."
    },
    {
      "sid": "s000336",
      "modified": "A is reachable to S. Now there might be many vertices here that are not reachable to S. Their distances are not finalized yet."
    },
    {
      "sid": "s000337",
      "modified": "Okay, so A is reachable to S. C is reachable to S, via B."
    },
    {
      "sid": "s000338",
      "modified": "So these two, and there might be many other vertices here."
    },
    {
      "sid": "s000339",
      "modified": "That's so so far are not reachable to us."
    },
    {
      "sid": "s000340",
      "modified": "They are not adjacent to something that's finalized."
    },
    {
      "sid": "s000341",
      "modified": "This is finalized."
    },
    {
      "sid": "s000342",
      "modified": "This is finalized."
    },
    {
      "sid": "s000343",
      "modified": "So all the neighbors of finalized ones, that's the subset."
    },
    {
      "sid": "s000344",
      "modified": "And the proof is based on that of all these, you pick the minimum one."
    },
    {
      "sid": "s000346",
      "modified": "One, one is S to itself."
    },
    {
      "sid": "s000348",
      "modified": "That's why I put S way up there in a category by itself."
    },
    {
      "sid": "s000349",
      "modified": "Then there are the brackets that are vertices whose weight have been finalized, meaning that's the shortest time."
    },
    {
      "sid": "s000350",
      "modified": "I put somebody here only when I'm sure its distance is finalized."
    },
    {
      "sid": "s000351",
      "modified": "I never have to touch that again."
    },
    {
      "sid": "s000352",
      "modified": "So I put D in the bracket parts."
    },
    {
      "sid": "s000353",
      "modified": "Then I see A and C. They come into temporary parts."
    },
    {
      "sid": "s000355",
      "modified": "Yes, every path that is."
    },
    {
      "sid": "s000357",
      "modified": "So I'll show you the data structure for keeping track of both of these paths."
    },
    {
      "sid": "s000358",
      "modified": "But for now, yes, we need to have them all."
    },
    {
      "sid": "s000359",
      "modified": "That has a weird 10 and then also going all the way around that."
    },
    {
      "sid": "s000361",
      "modified": "No, so that's the whole point."
    },
    {
      "sid": "s000362",
      "modified": "The path that goes all the way, let's say this way and back to C. I haven't seen these."
    },
    {
      "sid": "s000363",
      "modified": "So these are temporary paths for numbers."
    },
    {
      "sid": "s000364",
      "modified": "So I know the temporary distance from C to S this way is 2."
    },
    {
      "sid": "s000367",
      "modified": "I mean, like to A, you could go to B, C. Sorry, say that again."
    },
    {
      "sid": "s000368",
      "modified": "I mean, is like the path from S to A, which it has a weight of 10."
    },
    {
      "sid": "s000369",
      "modified": "And I'm also going all the way around."
    },
    {
      "sid": "s000370",
      "modified": "So using B, C, and then back A are those on both of those paths?"
    },
    {
      "sid": "s000371",
      "modified": "No, I only."
    },
    {
      "sid": "s000372",
      "modified": "So far, I only know the path from C to S and from A to S. And so I have two vertices whose distance to S I know so far."
    },
    {
      "sid": "s000373",
      "modified": "I pick the minimum one, C. And I can prove, as I did here, that this distance C to S is going to be the minimum path."
    },
    {
      "sid": "s000374",
      "modified": "Therefore, this becomes from temporary 2 to permanent 2."
    },
    {
      "sid": "s000375",
      "modified": "Then later I need to do something with A. I haven't talked about that."
    },
    {
      "sid": "s000376",
      "modified": "A is going to remain in the temporary one."
    },
    {
      "sid": "s000377",
      "modified": "So these are permanent, these are temporary."
    },
    {
      "sid": "s000378",
      "modified": "So one of these guys, Y is going to move from here to permanent, and everyone else is going to remain as temporary."
    },
    {
      "sid": "s000379",
      "modified": "There are also vertices that I haven't even visited."
    },
    {
      "sid": "s000380",
      "modified": "Where do they go?"
    },
    {
      "sid": "s000381",
      "modified": "If that's an implementation detail, people say, let's assign a weight of infinity to that temporary weight of infinity."
    },
    {
      "sid": "s000382",
      "modified": "So put all of these in this category, just leave their weight as infinity."
    },
    {
      "sid": "s000383",
      "modified": "That's one way, implementation way."
    },
    {
      "sid": "s000384",
      "modified": "Another way is for these that I haven't even seen, create yet another category called unreachables."
    },
    {
      "sid": "s000386",
      "modified": "Same thing. So personal implementation preference, please."
    },
    {
      "sid": "s000388",
      "modified": "Understanding how like two, you can put."
    },
    {
      "sid": "s000389",
      "modified": "Brackets around it when you don't know all the paths to get to it."
    },
    {
      "sid": "s000390",
      "modified": "That's the whole proof there."
    },
    {
      "sid": "s000391",
      "modified": "Okay, so any other path that comes to C gotta go through A, yes or no?"
    },
    {
      "sid": "s000392",
      "modified": "Okay, so this 10 is already greater than 2."
    },
    {
      "sid": "s000393",
      "modified": "So any other path."
    },
    {
      "sid": "s000394",
      "modified": "There are billions of paths going to C. They have to go through 10."
    },
    {
      "sid": "s000396",
      "modified": "10 plus a positive number is going to be larger than 2 because 2 is larger than 10."
    },
    {
      "sid": "s000397",
      "modified": "Why is 2 larger than 10?"
    },
    {
      "sid": "s000398",
      "modified": "Because I picked it that way."
    },
    {
      "sid": "s000399",
      "modified": "That's why I wrote minimum."
    },
    {
      "sid": "s000401",
      "modified": "And what you just asked, that's the key part of the proof."
    },
    {
      "sid": "s000402",
      "modified": "The rest of it are miscellaneous."
    },
    {
      "sid": "s000403",
      "modified": "That's the main operation."
    },
    {
      "sid": "s000404",
      "modified": "First we did it for just the very first one."
    },
    {
      "sid": "s000405",
      "modified": "But in general, it's not really the same idea and the same proof."
    },
    {
      "sid": "s000406",
      "modified": "So the rest of it is, how do I implement it?"
    },
    {
      "sid": "s000408",
      "modified": "What kind of data structure?"
    },
    {
      "sid": "s000409",
      "modified": "What you just asked?"
    },
    {
      "sid": "s000410",
      "modified": "That's the key part of the proof."
    },
    {
      "sid": "s000411",
      "modified": "Once you observe that the rest is trivial and most algorithms are kind of like that, there is a central team, we discover that the rest becomes easier."
    },
    {
      "sid": "s000412",
      "modified": "So if you want to write node to yourself."
    },
    {
      "sid": "s000413",
      "modified": "How do I prove that?"
    },
    {
      "sid": "s000414",
      "modified": "Write to yourself."
    },
    {
      "sid": "s000415",
      "modified": "The key point is minimum will be the actual shortest path from Y to X."
    },
    {
      "sid": "s000416",
      "modified": "That's the key hypothesis."
    },
    {
      "sid": "s000417",
      "modified": "Once you prove that, the rest is easy."
    },
    {
      "sid": "s000419",
      "modified": "Does this also work for directed graphs?"
    },
    {
      "sid": "s000420",
      "modified": "Yes, most things that I say works for directed graph, unless I say otherwise."
    },
    {
      "sid": "s000421",
      "modified": "Okay, so the way it goes is like this."
    },
    {
      "sid": "s000422",
      "modified": "The way the algorithm proceeds."
    },
    {
      "sid": "s000423",
      "modified": "Based on the example, based on what we did here, based on this proof, the algorithm proceeds in the following manner, I have S0."
    },
    {
      "sid": "s000424",
      "modified": "That's how I initialize my algorithm."
    },
    {
      "sid": "s000425",
      "modified": "Then I have a set of vertices that are permanent."
    },
    {
      "sid": "s000426",
      "modified": "And I have a set of vertices that are temporary."
    },
    {
      "sid": "s000427",
      "modified": "Initially, there is nothing permanent on S. And everyone else is in temporary."
    },
    {
      "sid": "s000428",
      "modified": "With some that says with all of them actually initially saying infinite weight because no one has been reached."
    },
    {
      "sid": "s000429",
      "modified": "At the beginning of the algorithm, before I do anything, first step, set S to 0."
    },
    {
      "sid": "s000431",
      "modified": "Then you look at all neighbors of S, meaning of all these, you will update their value, which was originally for all of them, infinity."
    },
    {
      "sid": "s000432",
      "modified": "Some of them, if they are directly connected to S, you go from infinity to 1, you go from infinity to 10, and the others remain at infinity."
    },
    {
      "sid": "s000433",
      "modified": "Okay, so in that example, C and all these X, Y, Z remain at infinity."
    },
    {
      "sid": "s000435",
      "modified": "Step one of the algorithm, or step two of the algorithm."
    },
    {
      "sid": "s000437",
      "modified": "I take the minimum of these values happen to be 1, I move 1 up here, so that becomes permanent."
    },
    {
      "sid": "s000438",
      "modified": "And the way I picked 1 is the minimum of 1, 10, infinity, infinity, infinity."
    },
    {
      "sid": "s000439",
      "modified": "Because this is the minimum."
    },
    {
      "sid": "s000440",
      "modified": "There are going to be a billion other paths that's going to go through here."
    },
    {
      "sid": "s000441",
      "modified": "Because this is the minimum."
    },
    {
      "sid": "s000442",
      "modified": "All those billion other paths must go through other vertices."
    },
    {
      "sid": "s000443",
      "modified": "They are already larger than minimum, so anything extra is going to be larger."
    },
    {
      "sid": "s000444",
      "modified": "Okay, so so far it's the initialization step."
    },
    {
      "sid": "s000445",
      "modified": "Then for this, it will have edges going to some vertices."
    },
    {
      "sid": "s000446",
      "modified": "I will update their value."
    },
    {
      "sid": "s000447",
      "modified": "So if this value was 10, why was it 10?"
    },
    {
      "sid": "s000448",
      "modified": "Because it had a direct path to S. Now, because this became permanent, this value 10 may change."
    },
    {
      "sid": "s000449",
      "modified": "For example, if there was here an X of weight 3, because I moved V up here, that 10 and 3, the minimum of, sorry, 4, 3 plus 1."
    },
    {
      "sid": "s000450",
      "modified": "The minimum of those values becomes the new parenthesis value."
    },
    {
      "sid": "s000451",
      "modified": "Because I just found a better way for A to go through S. That's that way."
    },
    {
      "sid": "s000453",
      "modified": "So you just don't look at the cost field."
    },
    {
      "sid": "s000454",
      "modified": "You look at the total cost."
    },
    {
      "sid": "s000457",
      "modified": "Because what matters in this problem is how close are you to S?"
    },
    {
      "sid": "s000458",
      "modified": "How close you are to S is this value plus the new H1 plus 3."
    },
    {
      "sid": "s000459",
      "modified": "And I already have a value 10."
    },
    {
      "sid": "s000460",
      "modified": "So I can take the minimum."
    },
    {
      "sid": "s000461",
      "modified": "And there might be other paths."
    },
    {
      "sid": "s000462",
      "modified": "I take the minimum of all these, I update this with the minimum value and kind of."
    },
    {
      "sid": "s000463",
      "modified": "Why is it 3 plus 1?"
    },
    {
      "sid": "s000464",
      "modified": "Because the distance now from A to S is 3 plus 1."
    },
    {
      "sid": "s000465",
      "modified": "That's why I write 4, not 3."
    },
    {
      "sid": "s000467",
      "modified": "That's it."
    },
    {
      "sid": "s000468",
      "modified": "I told you."
    },
    {
      "sid": "s000469",
      "modified": "Not the last step of the implementation, but we know how it goes now."
    },
    {
      "sid": "s000470",
      "modified": "So I just move one of these up there and I updated the values, keep going of whatever else is left, pick the minimum, move it up, update the values, keep doing that till everybody ends up in."
    },
    {
      "sid": "s000472",
      "modified": "Each step was based on that fact."
    },
    {
      "sid": "s000473",
      "modified": "That minimum will give you the shortest path."
    },
    {
      "sid": "s000474",
      "modified": "Each step, therefore, is optimal."
    },
    {
      "sid": "s000475",
      "modified": "Therefore the entire algorithm is optimal."
    },
    {
      "sid": "s000476",
      "modified": "So it's a greedy paradigm."
    },
    {
      "sid": "s000477",
      "modified": "What mattered was how to carefully pick the next vertex."
    },
    {
      "sid": "s000478",
      "modified": "We tried three different ways of picking the next vertex, and they all failed."
    },
    {
      "sid": "s000479",
      "modified": "But because they failed, they gave us new ideas."
    },
    {
      "sid": "s000480",
      "modified": "And those new ideas, one of them turned out to be actually optimal."
    },
    {
      "sid": "s000481",
      "modified": "So it's greedy."
    },
    {
      "sid": "s000482",
      "modified": "There are billions of vertices that I haven't seen yet."
    },
    {
      "sid": "s000483",
      "modified": "Nevertheless, I insist that B or after that, C are the minimum."
    },
    {
      "sid": "s000484",
      "modified": "And I want to finalize their paths, even though I haven't."
    },
    {
      "sid": "s000485",
      "modified": "As you said, there are a billion other paths that takes me to C. But based on this observation, the distance from S to C is finalized at each step."
    },
    {
      "sid": "s000486",
      "modified": "And that's the proof."
    },
    {
      "sid": "s000487",
      "modified": "So I keep applying the proof."
    },
    {
      "sid": "s000488",
      "modified": "One more vertex proof, one more step till I'm done with all the vertices."
    },
    {
      "sid": "s000489",
      "modified": "Again, I don't care if you know this algorithm or not."
    },
    {
      "sid": "s000490",
      "modified": "Actually, I can, but that's not the point."
    },
    {
      "sid": "s000491",
      "modified": "The point is everything that happened before this last step, the thinking process, the failing of some ideas."
    },
    {
      "sid": "s000492",
      "modified": "I wasn't afraid."
    },
    {
      "sid": "s000493",
      "modified": "You gave me a few ideas that actually helped me come up with this."
    },
    {
      "sid": "s000494",
      "modified": "So don't be afraid of coming up with these new ideas."
    },
    {
      "sid": "s000496",
      "modified": "Ideas. Even though you know it's going to fail, or maybe it's going to fail, but you're going to learn from it because you're going to answer, why did it fail?"
    },
    {
      "sid": "s000498",
      "modified": "Hopefully, that suggests new ways of solving a problem."
    },
    {
      "sid": "s000499",
      "modified": "So that thinking process is really what matters in this course."
    },
    {
      "sid": "s000500",
      "modified": "This algorithm is called Dijkstra."
    },
    {
      "sid": "s000501",
      "modified": "Dijkstra is Shortest Path Algorithm."
    },
    {
      "sid": "s000502",
      "modified": "A professor at UT Austin named Dijkstra came up with this algorithm in the 70s."
    },
    {
      "sid": "s000503",
      "modified": "So as of today, we call it Dijkstra."
    },
    {
      "sid": "s000504",
      "modified": "And it's a very efficient algorithm, implementation wise."
    },
    {
      "sid": "s000505",
      "modified": "So many tools right now."
    },
    {
      "sid": "s000506",
      "modified": "Many software out there use this algorithm in the past, since seven minutes has been the best."
    },
    {
      "sid": "s000508",
      "modified": "We'll get to that."
    },
    {
      "sid": "s000509",
      "modified": "So I get confused personally very quickly."
    },
    {
      "sid": "s000510",
      "modified": "So I don't want to confuse things."
    },
    {
      "sid": "s000511",
      "modified": "First I play with the problem, do a few examples."
    },
    {
      "sid": "s000512",
      "modified": "I do an algorithm, it fails, then I improve the algorithm."
    },
    {
      "sid": "s000513",
      "modified": "Now I have confidence that my algorithm is going to work."
    },
    {
      "sid": "s000514",
      "modified": "Now I'm going to improve, invest the time to get into details on it."
    },
    {
      "sid": "s000515",
      "modified": "Very last, usually the very last step."
    },
    {
      "sid": "s000516",
      "modified": "And when you do the last step, that's maybe a good time to talk about data structures."
    },
    {
      "sid": "s000518",
      "modified": "Right, so the reason is this."
    },
    {
      "sid": "s000519",
      "modified": "The reason is this."
    },
    {
      "sid": "s000520",
      "modified": "So A, C, these two numbers, this and that, these are the only vertices that are reachable from S so far."
    },
    {
      "sid": "s000521",
      "modified": "Like this one is not yet."
    },
    {
      "sid": "s000522",
      "modified": "Of all these numbers, I pick the minimum."
    },
    {
      "sid": "s000523",
      "modified": "This minimum is the same as this minimum."
    },
    {
      "sid": "s000524",
      "modified": "That's the key to optimality, to proving optimality of the algorithm."
    },
    {
      "sid": "s000525",
      "modified": "Okay, so by contradiction, if there was some other path that would go to C, not this one, then maybe I should wait for that."
    },
    {
      "sid": "s000526",
      "modified": "But if there was some other path, it will go through this."
    },
    {
      "sid": "s000527",
      "modified": "This is already 10 is larger than 2 and we don't have any negative edges."
    },
    {
      "sid": "s000528",
      "modified": "Therefore 10 plus a positive number is going to be larger than 2 because 2 is larger than 10."
    },
    {
      "sid": "s000529",
      "modified": "That's the key step of the proof."
    },
    {
      "sid": "s000530",
      "modified": "And before back here, I have the base case of that proof."
    },
    {
      "sid": "s000531",
      "modified": "So this is the part that you want to be super comfortable with because that's the crux of the proof."
    },
    {
      "sid": "s000532",
      "modified": "The rest is the stitching things to be together."
    },
    {
      "sid": "s000534",
      "modified": "So if you had like another edge that."
    },
    {
      "sid": "s000536",
      "modified": "Would that."
    },
    {
      "sid": "s000537",
      "modified": "Sorry, I don't follow."
    },
    {
      "sid": "s000539",
      "modified": "There's an F here."
    },
    {
      "sid": "s000541",
      "modified": "That's of one."
    },
    {
      "sid": "s000543",
      "modified": "Would this two, like be temporary?"
    },
    {
      "sid": "s000544",
      "modified": "Because you have a nice."
    },
    {
      "sid": "s000546",
      "modified": "Okay, thank you."
    },
    {
      "sid": "s000548",
      "modified": "So let's take this example, S. So this timing."
    },
    {
      "sid": "s000549",
      "modified": "Okay, this is too complex for me."
    },
    {
      "sid": "s000550",
      "modified": "Too many things are happening."
    },
    {
      "sid": "s000551",
      "modified": "It confuses me a lot."
    },
    {
      "sid": "s000552",
      "modified": "So I go back to the basic."
    },
    {
      "sid": "s000553",
      "modified": "To the algorithm."
    },
    {
      "sid": "s000554",
      "modified": "The algorithm says, one, set this to be temporary one, right?"
    },
    {
      "sid": "s000555",
      "modified": "Because S is permanent."
    },
    {
      "sid": "s000556",
      "modified": "This is a neighbor of S. Anything that's a neighbor of S, I can put a parenthesis on it."
    },
    {
      "sid": "s000557",
      "modified": "The rest are infinity."
    },
    {
      "sid": "s000558",
      "modified": "This is 10, what is this right now?"
    },
    {
      "sid": "s000560",
      "modified": "I haven't reached that."
    },
    {
      "sid": "s000562",
      "modified": "No, there is this A."
    },
    {
      "sid": "s000563",
      "modified": "You draw it right?"
    },
    {
      "sid": "s000564",
      "modified": "So this is 1, right?"
    },
    {
      "sid": "s000565",
      "modified": "All neighbors of permanent are going to be."
    },
    {
      "sid": "s000566",
      "modified": "The infinite is going to be replaced."
    },
    {
      "sid": "s000567",
      "modified": "So 1 and 1, right?"
    },
    {
      "sid": "s000568",
      "modified": "So right now, after the first step, after S becomes neighbors of S is going to be 10, 1 and 1."
    },
    {
      "sid": "s000569",
      "modified": "Which one is the minimum?"
    },
    {
      "sid": "s000570",
      "modified": "Which one doesn't matter."
    },
    {
      "sid": "s000571",
      "modified": "So you pick whatever you like."
    },
    {
      "sid": "s000572",
      "modified": "You want this, move it up there."
    },
    {
      "sid": "s000573",
      "modified": "You want this, move it up there."
    },
    {
      "sid": "s000575",
      "modified": "Then update the candidates, so I one step at a time."
    },
    {
      "sid": "s000577",
      "modified": "I applied that algorithm."
    },
    {
      "sid": "s000578",
      "modified": "It moves one of them, then I update the values, move the next one one step at a time."
    },
    {
      "sid": "s000579",
      "modified": "Don't think of all billions of paths that you see."
    },
    {
      "sid": "s000580",
      "modified": "All I care about is the minimum value is going to be up."
    },
    {
      "sid": "s000584",
      "modified": "Okay, so how would I implement that?"
    },
    {
      "sid": "s000585",
      "modified": "Oh, there are so many things happening."
    },
    {
      "sid": "s000586",
      "modified": "These values keep changing all the time."
    },
    {
      "sid": "s000587",
      "modified": "What if I keep changing and changing?"
    },
    {
      "sid": "s000588",
      "modified": "So this becomes an N cube algorithm, N4 algorithm, et cetera."
    },
    {
      "sid": "s000589",
      "modified": "Okay, so let's do some analysis of the time. S. These are permanent, these are temporary, right?"
    },
    {
      "sid": "s000590",
      "modified": "In a generic step, there are n steps."
    },
    {
      "sid": "s000591",
      "modified": "At each step, a temporary value becomes permanent."
    },
    {
      "sid": "s000592",
      "modified": "The minimum of these becomes permanent, right?"
    },
    {
      "sid": "s000593",
      "modified": "So I have n of these steps, counting that."
    },
    {
      "sid": "s000594",
      "modified": "Otherwise I have n minus 1 step, as you know, doesn't matter."
    },
    {
      "sid": "s000596",
      "modified": "Same order at the end of the day."
    },
    {
      "sid": "s000597",
      "modified": "Okay, so this is a generic step."
    },
    {
      "sid": "s000598",
      "modified": "If there are n values in this generic step, first thing I have to find a mean value of n numbers."
    },
    {
      "sid": "s000599",
      "modified": "Find the mean value."
    },
    {
      "sid": "s000600",
      "modified": "So first there is that initialization for X."
    },
    {
      "sid": "s000601",
      "modified": "That's order 1 mean of n values."
    },
    {
      "sid": "s000602",
      "modified": "How much time does it take?"
    },
    {
      "sid": "s000603",
      "modified": "We did that last time."
    },
    {
      "sid": "s000605",
      "modified": "But since for the most part you are happy with order, taking the mean of n values takes linear time."
    },
    {
      "sid": "s000606",
      "modified": "You compare the first two."
    },
    {
      "sid": "s000607",
      "modified": "You remember a temporary minimum."
    },
    {
      "sid": "s000608",
      "modified": "Keep moving a pointer."
    },
    {
      "sid": "s000609",
      "modified": "If it's less than the minimum, replace the minimum in order and time, you know, the minimum."
    },
    {
      "sid": "s000610",
      "modified": "So this main thing here takes linear time."
    },
    {
      "sid": "s000611",
      "modified": "So this just moves up there."
    },
    {
      "sid": "s000612",
      "modified": "When a vertex becomes a brand new neighbor of S, you may need to go and update these values that are neighbors of."
    },
    {
      "sid": "s000613",
      "modified": "Let me call that A."
    },
    {
      "sid": "s000614",
      "modified": "Some of them maybe were infinity, some of them were 10, 12 because of that, in fact, the example we had before, this becomes maybe 5, this becomes 2, etc."
    },
    {
      "sid": "s000616",
      "modified": "So you update."
    },
    {
      "sid": "s000617",
      "modified": "How much time does it take?"
    },
    {
      "sid": "s000618",
      "modified": "There are n vertices here, so updating n values before the runtime."
    },
    {
      "sid": "s000621",
      "modified": "So initialization is once the loop is find the minimum update."
    },
    {
      "sid": "s000622",
      "modified": "Find the minimum update."
    },
    {
      "sid": "s000624",
      "modified": "So, yeah, say that again."
    },
    {
      "sid": "s000626",
      "modified": "So remember, this is 1, this is 1."
    },
    {
      "sid": "s000627",
      "modified": "Okay, Now I make 1."
    },
    {
      "sid": "s000628",
      "modified": "To be permanent, I have two choices."
    },
    {
      "sid": "s000629",
      "modified": "I decided to fit this."
    },
    {
      "sid": "s000630",
      "modified": "I make this permanent, move it up."
    },
    {
      "sid": "s000631",
      "modified": "Then this value here is going to be the."
    },
    {
      "sid": "s000632",
      "modified": "Let's say this is 1, 2."
    },
    {
      "sid": "s000633",
      "modified": "This value is going to be the minimum of 10 and the minimum of 1 plus 1, 2."
    },
    {
      "sid": "s000634",
      "modified": "So 2 is less than 10."
    },
    {
      "sid": "s000635",
      "modified": "So this needs to be updated to 2."
    },
    {
      "sid": "s000636",
      "modified": "That's the updating value."
    },
    {
      "sid": "s000637",
      "modified": "As I make more vertices permanent, the distance of some vertices may go from infinity to non-infinity, from 10 to 2, from whatever to whatever."
    },
    {
      "sid": "s000638",
      "modified": "That's the updating point."
    },
    {
      "sid": "s000641",
      "modified": "So the first case we're updating every node had an edge to all other nodes."
    },
    {
      "sid": "s000643",
      "modified": "You're updating N because every."
    },
    {
      "sid": "s000644",
      "modified": "For every vertex here that is going to have only one edge to another vertex."
    },
    {
      "sid": "s000645",
      "modified": "So N. But this is a pair loop."
    },
    {
      "sid": "s000646",
      "modified": "Maybe you are same for the entire."
    },
    {
      "sid": "s000648",
      "modified": "So this is E squared."
    },
    {
      "sid": "s000649",
      "modified": "Okay, so now I add."
    },
    {
      "sid": "s000650",
      "modified": "Each step takes linear time."
    },
    {
      "sid": "s000651",
      "modified": "How many steps are there every time I move one of these up there?"
    },
    {
      "sid": "s000652",
      "modified": "So number of steps is going to be order N, to be exact."
    },
    {
      "sid": "s000653",
      "modified": "So total algorithm is order of N squared."
    },
    {
      "sid": "s000654",
      "modified": "This, I'm going to give you another implementation."
    },
    {
      "sid": "s000655",
      "modified": "This is the least straightforward implementation, the easiest, but maybe not the best because say the algorithm didn't have the graph didn't have many edges, was a tree structure, it had linear number of edges."
    },
    {
      "sid": "s000656",
      "modified": "Maybe this is an overkill."
    },
    {
      "sid": "s000658",
      "modified": "So far so good."
    },
    {
      "sid": "s000659",
      "modified": "We have an algorithm."
    },
    {
      "sid": "s000660",
      "modified": "It works."
    },
    {
      "sid": "s000661",
      "modified": "It's polynomial time, it's fixed."
    },
    {
      "sid": "s000662",
      "modified": "Very straightforward to implement."
    },
    {
      "sid": "s000663",
      "modified": "All you need to have is an array here with all the temporary values that every time you go through it and find a mean."
    },
    {
      "sid": "s000664",
      "modified": "So after all the observation, after all the algorithms, now I can talk about runtime only then."
    },
    {
      "sid": "s000665",
      "modified": "It was perhaps premature to talk about these things earlier on because I wasn't even sure if the algorithm is working."
    },
    {
      "sid": "s000666",
      "modified": "I did not have a proof."
    },
    {
      "sid": "s000667",
      "modified": "Those should come at a higher level because if you decide to change any step of the algorithm, then all of these has to be changed."
    },
    {
      "sid": "s000669",
      "modified": "I want to do one step at a time."
    },
    {
      "sid": "s000670",
      "modified": "Now I'm confident everything works, the algorithm works."
    },
    {
      "sid": "s000671",
      "modified": "Moving up works."
    },
    {
      "sid": "s000672",
      "modified": "Now let's implement it."
    },
    {
      "sid": "s000674",
      "modified": "Is there any way to account for that thing instead of doing N? Yes."
    },
    {
      "sid": "s000675",
      "modified": "To improve."
    },
    {
      "sid": "s000677",
      "modified": "Your question is how?"
    },
    {
      "sid": "s000679",
      "modified": "Right."
    },
    {
      "sid": "s000680",
      "modified": "So again, I want to do simplest things, right?"
    },
    {
      "sid": "s000681",
      "modified": "That's my approach."
    },
    {
      "sid": "s000682",
      "modified": "So I get some partial credit for this."
    },
    {
      "sid": "s000683",
      "modified": "But what if I would have said, come up with the most efficient algorithm as a function of edge?"
    },
    {
      "sid": "s000684",
      "modified": "Maybe you observe that even though I have like five edges, I'm counting N updates."
    },
    {
      "sid": "s000685",
      "modified": "That's not going to happen."
    },
    {
      "sid": "s000686",
      "modified": "If I don't have many edges."
    },
    {
      "sid": "s000687",
      "modified": "Chances of this being connected to many edges is very small."
    },
    {
      "sid": "s000688",
      "modified": "It's not going to be nice."
    },
    {
      "sid": "s000689",
      "modified": "It's going to be maybe five, a constant number."
    },
    {
      "sid": "s000690",
      "modified": "So why am I doing an overkill?"
    },
    {
      "sid": "s000691",
      "modified": "Why am I so pessimistic?"
    },
    {
      "sid": "s000692",
      "modified": "I guess that's what you were asking."
    },
    {
      "sid": "s000693",
      "modified": "So now I have something done."
    },
    {
      "sid": "s000694",
      "modified": "Now let's focus on edges."
    },
    {
      "sid": "s000695",
      "modified": "So generally when you do an algorithm, you can do a vertex-centric approach."
    },
    {
      "sid": "s000696",
      "modified": "This is vertex-centric."
    },
    {
      "sid": "s000697",
      "modified": "All the analysis focused on vertices."
    },
    {
      "sid": "s000698",
      "modified": "All the counting was done on the vertices."
    },
    {
      "sid": "s000699",
      "modified": "Now we want to go to an edge-centric approach."
    },
    {
      "sid": "s000700",
      "modified": "Why?"
    },
    {
      "sid": "s000701",
      "modified": "Because I know statistically, graphs do not have that many edges."
    },
    {
      "sid": "s000703",
      "modified": "What is the maximum number of edges in a graph?"
    },
    {
      "sid": "s000704",
      "modified": "N squared."
    },
    {
      "sid": "s000705",
      "modified": "So in the worst case, this is pretty good."
    },
    {
      "sid": "s000706",
      "modified": "But in real life, any connection graph is not."
    },
    {
      "sid": "s000707",
      "modified": "If you look at all the cities under connection, airline connection, it's not that every city is going to be connected to every other city with an airline path."
    },
    {
      "sid": "s000708",
      "modified": "No, it's going to be much, much less."
    },
    {
      "sid": "s000709",
      "modified": "It's usually linear number of edges."
    },
    {
      "sid": "s000710",
      "modified": "Okay, so instead of saying update takes."
    },
    {
      "sid": "s000711",
      "modified": "So that's all correct."
    },
    {
      "sid": "s000712",
      "modified": "Actually, let me leave the green one here."
    },
    {
      "sid": "s000713",
      "modified": "Now, instead of saying it takes N unit of time to update that, I'm going to say 1 edge, 2 edges, 3 edges."
    },
    {
      "sid": "s000714",
      "modified": "So it's going to be order E1 edges, the number of edges connected to this."
    },
    {
      "sid": "s000715",
      "modified": "Next time when I move one of them up, it's got to be all of E2, the edges connected to this, like these guys."
    },
    {
      "sid": "s000717",
      "modified": "How many times do I look at this edge for updating?"
    },
    {
      "sid": "s000718",
      "modified": "Only once."
    },
    {
      "sid": "s000719",
      "modified": "Only when this was just moved up and this is connected to that."
    },
    {
      "sid": "s000720",
      "modified": "I count this edge in E1."
    },
    {
      "sid": "s000721",
      "modified": "I never put this edge in any other E sub I."
    },
    {
      "sid": "s000722",
      "modified": "So summation of all the edges is going to be order E. So this update is going to be order E for the entire algorithm, not just for one loop for the entire."
    },
    {
      "sid": "s000723",
      "modified": "Because one loop is E1, then it's E2."
    },
    {
      "sid": "s000725",
      "modified": "So the final runtime is order E plus."
    },
    {
      "sid": "s000726",
      "modified": "Forget about order 1."
    },
    {
      "sid": "s000728",
      "modified": "I can write it or always say 1 is less than E. I'm not going to even bother with that finding."
    },
    {
      "sid": "s000730",
      "modified": "It's going to be N times N plus N squared."
    },
    {
      "sid": "s000731",
      "modified": "So the new clever algorithm now is order E is the same algorithm."
    },
    {
      "sid": "s000732",
      "modified": "It's just accounting is different."
    },
    {
      "sid": "s000733",
      "modified": "As you said it perfectly, instead of charging to the vertices, I charge them to the edges."
    },
    {
      "sid": "s000734",
      "modified": "Same algorithms, different accounting."
    },
    {
      "sid": "s000735",
      "modified": "We talked about different accounting methods for the same algorithm."
    },
    {
      "sid": "s000736",
      "modified": "You spend 100 bucks Saturday night."
    },
    {
      "sid": "s000737",
      "modified": "Your expenses for the week is not 7 times 100."
    },
    {
      "sid": "s000738",
      "modified": "You amortize that."
    },
    {
      "sid": "s000739",
      "modified": "Okay, so now I have a much better algorithm."
    },
    {
      "sid": "s000740",
      "modified": "E plus N squared, yes or no?"
    },
    {
      "sid": "s000741",
      "modified": "No."
    },
    {
      "sid": "s000742",
      "modified": "This is bad."
    },
    {
      "sid": "s000743",
      "modified": "This is actually kind of worse than that."
    },
    {
      "sid": "s000744",
      "modified": "So what is the bottleneck? It's this guy."
    },
    {
      "sid": "s000745",
      "modified": "Such a simple process is giving me a headache here."
    },
    {
      "sid": "s000746",
      "modified": "It's costing me N squared time."
    },
    {
      "sid": "s000747",
      "modified": "So instead of me trying to optimize all aspects of this implementation, this, this, this, et cetera, I will focus on that."
    },
    {
      "sid": "s000748",
      "modified": "I'm saying I can do better than that with finding a bunch of minimums, right?"
    },
    {
      "sid": "s000749",
      "modified": "So instead of targeting every aspect of the algorithm, I target the mean finding."
    },
    {
      "sid": "s000750",
      "modified": "Okay, so we went from this huge problem."
    },
    {
      "sid": "s000751",
      "modified": "Now all I'm left with is if I can do this more efficiently, then instead of N squared here, it's going to be something better."
    },
    {
      "sid": "s000752",
      "modified": "Okay, let's do that."
    },
    {
      "sid": "s000753",
      "modified": "This is something we're going to cover in a couple of weeks."
    },
    {
      "sid": "s000754",
      "modified": "I just want to talk about it."
    },
    {
      "sid": "s000755",
      "modified": "You probably have, maybe have seen it in your programming courses, called the heap data structure."
    },
    {
      "sid": "s000756",
      "modified": "Heap data structure is a binary tree where the minimum is at the root."
    },
    {
      "sid": "s000758",
      "modified": "And each node of this binary tree represents one of these values."
    },
    {
      "sid": "s000759",
      "modified": "The requirement or characteristic of a heap is the minimum value is at the root."
    },
    {
      "sid": "s000761",
      "modified": "That's it."
    },
    {
      "sid": "s000762",
      "modified": "It's not organized in any other way."
    },
    {
      "sid": "s000763",
      "modified": "So, for example, I could have 1 here, I could have 2 here, I could have 4 here, I could have 7 here."
    },
    {
      "sid": "s000764",
      "modified": "I could have 18 here."
    },
    {
      "sid": "s000765",
      "modified": "This is a heap structure because."
    },
    {
      "sid": "s000766",
      "modified": "And there is no relation between 18 and any of these numbers."
    },
    {
      "sid": "s000767",
      "modified": "This could be 27 or 7."
    },
    {
      "sid": "s000768",
      "modified": "It still has a deep property which says the minimum of every subtree should be at the root of that subtree."
    },
    {
      "sid": "s000769",
      "modified": "So this subtree, the whole thing, that's the minimum value of all these three numbers."
    },
    {
      "sid": "s000770",
      "modified": "What's the minimum?"
    },
    {
      "sid": "s000771",
      "modified": "I just look here of these."
    },
    {
      "sid": "s000772",
      "modified": "I look here."
    },
    {
      "sid": "s000773",
      "modified": "So it's a huge binary tree."
    },
    {
      "sid": "s000774",
      "modified": "The minimum of any subtree is at the root."
    },
    {
      "sid": "s000775",
      "modified": "Such a data structure is called a heap data structure."
    },
    {
      "sid": "s000776",
      "modified": "How long does it take to find the mean?"
    },
    {
      "sid": "s000777",
      "modified": "Constant time?"
    },
    {
      "sid": "s000778",
      "modified": "Finding the mean, order 1 time, how do I find the next mean?"
    },
    {
      "sid": "s000779",
      "modified": "It's going to be one of these two."
    },
    {
      "sid": "s000780",
      "modified": "So deleting one from."
    },
    {
      "sid": "s000781",
      "modified": "Once I find the mean, I delete it and I make this into a heap again in order log N time."
    },
    {
      "sid": "s000782",
      "modified": "I'm going to cover these."
    },
    {
      "sid": "s000783",
      "modified": "I just want you to know these values."
    },
    {
      "sid": "s000784",
      "modified": "Basically what happens is you take the minimum of these two, move it to the root, keep doing that."
    },
    {
      "sid": "s000785",
      "modified": "So the height of the tree is log N time, log 10."
    },
    {
      "sid": "s000786",
      "modified": "Therefore making this into a heap again, the literature calls it heapify."
    },
    {
      "sid": "s000787",
      "modified": "The tree again takes log N time."
    },
    {
      "sid": "s000788",
      "modified": "So for now, you can use this."
    },
    {
      "sid": "s000789",
      "modified": "There is such a data structure called a heap, a mean heap usually they call it, or a heap."
    },
    {
      "sid": "s000790",
      "modified": "You can find a minimum in constant time."
    },
    {
      "sid": "s000791",
      "modified": "You can make it into a heap again in log N time."
    },
    {
      "sid": "s000792",
      "modified": "Just like so I said for now, assume you can sort in N log N time."
    },
    {
      "sid": "s000794",
      "modified": "I will then soon discuss how to do this in log N time."
    },
    {
      "sid": "s000795",
      "modified": "Of course, this is easy."
    },
    {
      "sid": "s000796",
      "modified": "Okay, so with that in mind, what are we going to do?"
    },
    {
      "sid": "s000797",
      "modified": "I take all these values and I put them in a heap structure so I can find the mean in constant time."
    },
    {
      "sid": "s000798",
      "modified": "Every time I move something up there like A, I take these edges, I update these, the update we already talked about takes order E1 plus E2, etc."
    },
    {
      "sid": "s000799",
      "modified": "If any of these values of nodes changes, that new value I'm going to insert in the heap."
    },
    {
      "sid": "s000800",
      "modified": "So I extract, I make it into a heap again, that's log N time."
    },
    {
      "sid": "s000801",
      "modified": "And I'm going to insert in the heap a new value that takes another order log N time."
    },
    {
      "sid": "s000802",
      "modified": "Same idea."
    },
    {
      "sid": "s000803",
      "modified": "Simplifying and inserting is the same process as I shall describe."
    },
    {
      "sid": "s000804",
      "modified": "Okay, so for every edge here, I do an update and I insert into a heap."
    },
    {
      "sid": "s000805",
      "modified": "So the number of insertions in the heap is going to be E1 times log N. Log N and log E are the same because if E worst case N is squared, log of N squared is 2 log N. Otherwise they are the same."
    },
    {
      "sid": "s000806",
      "modified": "So you see, some people prefer to write log E, some people prefer to write log N. They are the same thing orderwise."
    },
    {
      "sid": "s000807",
      "modified": "Okay, so it's going to be E1 log N, E2 log N, E3 log N. So all the doing minimum at insertion and all that is going to be order of E log E or E log N for the entire algorithm."
    },
    {
      "sid": "s000808",
      "modified": "Because for each edge you do one of those things, extract minimum, heapify, insert a new value."
    },
    {
      "sid": "s000809",
      "modified": "So that's a more advanced."
    },
    {
      "sid": "s000810",
      "modified": "A more advanced data structure."
    },
    {
      "sid": "s000811",
      "modified": "Given that the heap is slightly more advanced than an array that is here."
    },
    {
      "sid": "s000812",
      "modified": "So the runtime now becomes order of E log E. Now, E log E is better in general than N squared."
    },
    {
      "sid": "s000814",
      "modified": "What happened to the old N for the initial?"
    },
    {
      "sid": "s000815",
      "modified": "Like each step part?"
    },
    {
      "sid": "s000817",
      "modified": "So updating the value."
    },
    {
      "sid": "s000818",
      "modified": "Distances from the start."
    },
    {
      "sid": "s000819",
      "modified": "You see, like in the initial algorithm."
    },
    {
      "sid": "s000820",
      "modified": "We initialize."
    },
    {
      "sid": "s000822",
      "modified": "Oh."
    },
    {
      "sid": "s000823",
      "modified": "So every update of the value that by itself is just E1, E2, E3, linear time."
    },
    {
      "sid": "s000824",
      "modified": "But you've got to put these values somewhere so that later on you can find their minimum."
    },
    {
      "sid": "s000825",
      "modified": "That's what costs more time."
    },
    {
      "sid": "s000826",
      "modified": "First time, no, you have the minimum 10 steps from now."
    },
    {
      "sid": "s000827",
      "modified": "You still need to find the mean just like that, very quickly."
    },
    {
      "sid": "s000828",
      "modified": "So preparing a heap, that's what, time constant?"
    },
    {
      "sid": "s000830",
      "modified": "Otherwise, yeah, it would be straightforward."
    },
    {
      "sid": "s000831",
      "modified": "So, two ideas."
    },
    {
      "sid": "s000832",
      "modified": "Linear array."
    },
    {
      "sid": "s000833",
      "modified": "Find the mean in linear time, update in linear time, everything linear and all the green values."
    },
    {
      "sid": "s000834",
      "modified": "That's for each step."
    },
    {
      "sid": "s000835",
      "modified": "There are N steps on N squared."
    },
    {
      "sid": "s000836",
      "modified": "Here we do the same thing, but we do the accounting for the entirety of the algorithm."
    },
    {
      "sid": "s000837",
      "modified": "Because each step is E1, E2, E3, etc."
    },
    {
      "sid": "s000838",
      "modified": "And each of those E's, I gotta multiply it by log N because that's the operation on heap."
    },
    {
      "sid": "s000839",
      "modified": "So this log N or log E, same thing, is because of the heap."
    },
    {
      "sid": "s000840",
      "modified": "If I had a data structure that I could find the mean magically in constant time and I could delete and insert in constant time, then we would not have the log E here."
    },
    {
      "sid": "s000841",
      "modified": "But you don't have such a data structure."
    },
    {
      "sid": "s000844",
      "modified": "So the runtime now becomes order of E log E. Now, E log E is better in general than N squared."
    },
    {
      "sid": "s000846",
      "modified": "What happened to the old N for the initial?"
    },
    {
      "sid": "s000847",
      "modified": "Like each step part?"
    },
    {
      "sid": "s000849",
      "modified": "No, the each step part."
    },
    {
      "sid": "s000850",
      "modified": "So there are two things."
    },
    {
      "sid": "s000851",
      "modified": "When I did this linear thing, I say each step takes this times that."
    },
    {
      "sid": "s000852",
      "modified": "So N times N. That's N small."
    },
    {
      "sid": "s000853",
      "modified": "The next analysis, I didn't do each step anymore."
    },
    {
      "sid": "s000854",
      "modified": "I said one step may be E1, one step is E2, step two, step three E3, sum of the E's is going to be this E, total number of edges in the graph."
    },
    {
      "sid": "s000855",
      "modified": "So I don't have N anymore."
    },
    {
      "sid": "s000856",
      "modified": "I have E1, E2, E3."
    },
    {
      "sid": "s000857",
      "modified": "They all add up to E."
    },
    {
      "sid": "s000859",
      "modified": "Different way of accounting."
    },
    {
      "sid": "s000860",
      "modified": "The E approach looks at the entirety of the algorithm and does the analysis."
    },
    {
      "sid": "s000861",
      "modified": "The vertex approach does one step at a time."
    },
    {
      "sid": "s000862",
      "modified": "Therefore you have that."
    },
    {
      "sid": "s000865",
      "modified": "So please make sure you are comfortable with these two approaches."
    },
    {
      "sid": "s000866",
      "modified": "We'll do a few other algorithms for totally unrelated problems starting on Thursday."
    },
    {
      "sid": "s000867",
      "modified": "They use the same idea over and over."
    },
    {
      "sid": "s000868",
      "modified": "So the vertex-centric approach, the edge-centric approach, they are different."
    },
    {
      "sid": "s000869",
      "modified": "So make sure you are comfortable with them."
    },
    {
      "sid": "s000870",
      "modified": "And the edge-centric does use the structure."
    },
    {
      "sid": "s000871",
      "modified": "So today we have two algorithms."
    },
    {
      "sid": "s000872",
      "modified": "One is this, one is that."
    },
    {
      "sid": "s000873",
      "modified": "Which one should I use?"
    },
    {
      "sid": "s000874",
      "modified": "If I ask you in the exam, remember that node-centric approach that we did for Dijkstra and the heap?"
    },
    {
      "sid": "s000875",
      "modified": "Which one should I use?"
    },
    {
      "sid": "s000876",
      "modified": "If I have a choice, what would you answer?"
    },
    {
      "sid": "s000877",
      "modified": "The heap."
    },
    {
      "sid": "s000878",
      "modified": "The heap one."
    },
    {
      "sid": "s000879",
      "modified": "Why?"
    },
    {
      "sid": "s000880",
      "modified": "Because it's faster."
    },
    {
      "sid": "s000881",
      "modified": "Why?"
    },
    {
      "sid": "s000882",
      "modified": "What if E is equal to N squared? We have N squared log N versus N squared."
    },
    {
      "sid": "s000883",
      "modified": "Which one should I use?"
    },
    {
      "sid": "s000884",
      "modified": "Yeah, if E is equal to N squared, then wouldn't we just choose the other option?"
    },
    {
      "sid": "s000885",
      "modified": "Yeah."
    },
    {
      "sid": "s000886",
      "modified": "So if it's a dense graph, I want to use this."
    },
    {
      "sid": "s000887",
      "modified": "This, because that's N squared."
    },
    {
      "sid": "s000888",
      "modified": "This is N squared, log N if it's a sparse graph."
    },
    {
      "sid": "s000889",
      "modified": "If E is equal to N, this is N log N, this is N squared."
    },
    {
      "sid": "s000890",
      "modified": "So this is better."
    },
    {
      "sid": "s000891",
      "modified": "So now you have given me two answers."
    },
    {
      "sid": "s000892",
      "modified": "When E is N, when A is N squared."
    },
    {
      "sid": "s000893",
      "modified": "What about everything else?"
    },
    {
      "sid": "s000894",
      "modified": "What is the answer?"
    },
    {
      "sid": "s000895",
      "modified": "When would I use which?"
    },
    {
      "sid": "s000896",
      "modified": "You can set the equation."
    },
    {
      "sid": "s000897",
      "modified": "When is it that this number is greater than that, you do the algebra."
    },
    {
      "sid": "s000898",
      "modified": "But when E is greater than N squared divided by log N, that's the boundary."
    },
    {
      "sid": "s000899",
      "modified": "If it's more than that, you want to use this algorithm."
    },
    {
      "sid": "s000900",
      "modified": "If it's less, you want to use this algorithm."
    },
    {
      "sid": "s000901",
      "modified": "Sorry, the other way."
    },
    {
      "sid": "s000902",
      "modified": "If it's more than that, you want to use this."
    },
    {
      "sid": "s000903",
      "modified": "This N squared is another example of more."
    },
    {
      "sid": "s000904",
      "modified": "If it's less, you want to use this."
    },
    {
      "sid": "s000905",
      "modified": "So your answer in the exam or in your interview is going to be."
    },
    {
      "sid": "s000906",
      "modified": "It depends."
    },
    {
      "sid": "s000907",
      "modified": "Tell me how many edges you have."
    },
    {
      "sid": "s000908",
      "modified": "That's what you should ask."
    },
    {
      "sid": "s000909",
      "modified": "If somebody's interviewing you."
    },
    {
      "sid": "s000910",
      "modified": "And if they say, I don't know, tell them I'm not going to answer."
    },
    {
      "sid": "s000911",
      "modified": "If they say, what?"
    },
    {
      "sid": "s000913",
      "modified": "You say, okay."
    },
    {
      "sid": "s000914",
      "modified": "When the graph is dense, dense is defined as E greater than N squared divided by log N. That's the definition of a dense graph in this example, then if this is the case, use that."
    },
    {
      "sid": "s000915",
      "modified": "If this is not the case, use this."
    },
    {
      "sid": "s000916",
      "modified": "If it's exactly that, then I don't care, do whatever you want."
    },
    {
      "sid": "s000917",
      "modified": "And the assumption always is E, N, etc."
    },
    {
      "sid": "s000919",
      "modified": "Assuming we have only five input or hundred inputs, it's trillions of inputs."
    },
    {
      "sid": "s000920",
      "modified": "Because there might be such an overhead in the structure of the heap, for example, that one may take take over the other."
    },
    {
      "sid": "s000921",
      "modified": "So our argument is asymptotic analysis."
    },
    {
      "sid": "s000922",
      "modified": "Large values of E and N. When you get higher, they don't tell you solve this variation of GPT."
    },
    {
      "sid": "s000923",
      "modified": "Assuming we have only five input or hundred inputs, it's trillions of inputs."
    },
    {
      "sid": "s000924",
      "modified": "Therefore this asymptotic stuff actually matters."
    },
    {
      "sid": "s000925",
      "modified": "So please, please practice this."
    },
    {
      "sid": "s000926",
      "modified": "Make sure you are super comfortable."
    },
    {
      "sid": "s000927",
      "modified": "There is so much stuff that happened today."
    },
    {
      "sid": "s000928",
      "modified": "Number one problem-solving technique."
    },
    {
      "sid": "s000929",
      "modified": "That's number one lesson."
    },
    {
      "sid": "s000930",
      "modified": "The rest kind of are secondary."
    },
    {
      "sid": "s000931",
      "modified": "Remember how we went about examples, coming up with hypothesis based on the examples?"
    },
    {
      "sid": "s000932",
      "modified": "The hypothesis failed."
    },
    {
      "sid": "s000933",
      "modified": "We had to modify them back and forth."
    },
    {
      "sid": "s000934",
      "modified": "Finally we were happy with our hypothesis."
    },
    {
      "sid": "s000935",
      "modified": "Then we proved it that any other path is going to be larger than minimum."
    },
    {
      "sid": "s000936",
      "modified": "Therefore that's the right thing."
    },
    {
      "sid": "s000937",
      "modified": "So all these steps, once we were happy with the algorithm, we did a few examples on the algorithm that actually worked."
    },
    {
      "sid": "s000938",
      "modified": "And you came up with this example, which is great."
    },
    {
      "sid": "s000939",
      "modified": "It's kind of confusing, but we convinced ourselves even for these confusing things, same idea works."
    },
    {
      "sid": "s000940",
      "modified": "Now we are very confident with our algorithm."
    },
    {
      "sid": "s000941",
      "modified": "Now we go to implementation."
    },
    {
      "sid": "s000942",
      "modified": "First I do a very straightforward implementation, taking a minimum in an array and updating an array."
    },
    {
      "sid": "s000943",
      "modified": "Kind of maybe not efficient, but it forms a and it gives us a decent algorithm."
    },
    {
      "sid": "s000944",
      "modified": "Then you observe that we are overestimating."
    },
    {
      "sid": "s000945",
      "modified": "Let's focus on edges, not vertices."
    },
    {
      "sid": "s000946",
      "modified": "Let's not be so pessimistic."
    },
    {
      "sid": "s000947",
      "modified": "That gave us the idea of an edge-centric approach."
    },
    {
      "sid": "s000948",
      "modified": "For that we investigated that we still have a bottleneck of mean."
    },
    {
      "sid": "s000949",
      "modified": "Then I go to books and Internet and whatever and I say wait, is there a good way to efficiently find mean?"
    },
    {
      "sid": "s000950",
      "modified": "Somebody tells me, book tells me, the Internet tells me yes, there is something called heap that's especially designed for finding minimums."
    },
    {
      "sid": "s000951",
      "modified": "I get happy, I come back, work with that."
    },
    {
      "sid": "s000952",
      "modified": "And that eventually gives rise to this."
    },
    {
      "sid": "s000953",
      "modified": "So many things happen, but one step at a time."
    },
    {
      "sid": "s000954",
      "modified": "If you so so close book, close note."
    },
    {
      "sid": "s000955",
      "modified": "If you can recreate today's lecture, you have a full understanding of not only shortest path, but a lot of things to come, including variations of this."
    },
    {
      "sid": "s000956",
      "modified": "That I may ask you in the exams."
    },
    {
      "sid": "s000957",
      "modified": "So please do that before Thursday."
    },
    {
      "sid": "s000958",
      "modified": "When I lecture, it's kind of."
    },
    {
      "sid": "s000959",
      "modified": "You say, yeah, yeah, yeah."
    },
    {
      "sid": "s000960",
      "modified": "It kind of makes sense."
    },
    {
      "sid": "s000961",
      "modified": "But when you know, you really understand the position."
    },
    {
      "sid": "s000962",
      "modified": "If you try to lecture."
    },
    {
      "sid": "s000963",
      "modified": "I recreate all of this yourself."
    },
    {
      "sid": "s000964",
      "modified": "So please do that before Thursday."
    }
  ]
}