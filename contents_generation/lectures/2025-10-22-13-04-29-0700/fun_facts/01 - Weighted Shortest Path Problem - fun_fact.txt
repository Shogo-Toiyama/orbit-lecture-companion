## Your GPS Relies on Finding the "Shortest" Path

When your GPS navigates you through traffic, it's not just counting turns; it's solving a version of the *Weighted Shortest Path Problem* by finding the path with the "minimum total weight". Instead of simply minimizing the number of roads taken, which would be an unweighted shortest path, GPS systems assign weights to road segments (edges) based on real-time factors like traffic congestion, speed limits, distance, and even tolls. This means the "shortest" path isn't necessarily the physically shortest distance, but the one that minimizes your travel time or cost, directly reflecting the lecture's idea that the "length" of a path is determined by the *sum of weights on its edges*.

This real-world application demonstrates how the concept of *minimum total weight* is crucial for practical problems. Your phone's mapping app constantly calculates these weighted paths from your *source vertex* (your current location) to various destinations (other vertices) to provide the most efficient route. It highlights why algorithms like Breadth-First Search, which only count edges, are *not suitable* for such complex scenarios, as they would ignore the critical real-world "costs" associated with each road segment.

## The Tricky Business of Negative Edge Weights

The lecture emphasizes that *all weights on the edges are assumed to be positive numbers*, and this isn't just a minor detailâ€”it's a critical constraint because negative edge weights introduce significant *technical difficulties*. Imagine a scenario where taking a detour through a specific sequence of roads actually *reduces* your total travel time or cost, not just by being faster, but by having a "negative cost" associated with it. This could happen if, for example, a road segment offers a rebate or a shortcut that effectively "pays" you to use it.

The problem arises because a path could potentially loop through a "negative cycle" (a series of edges whose weights sum to a negative value) infinitely, making the "shortest" path infinitely negative and undefined. This breaks the fundamental premise of many common shortest path algorithms, including the greedy approaches mentioned, which assume that once you've found the shortest path to a vertex, you won't find a better one by adding more edges. Understanding this limitation helps clarify why the *positive edge weights* assumption is so important for the algorithms typically used to solve the *Weighted Shortest Path Problem*.